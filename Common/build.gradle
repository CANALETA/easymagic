plugins {
    id 'fabric-loom' version '1.0.+'
    id 'io.github.juuxel.loom-quiltflower' version '1.7.1'
}

archivesBaseName = rootProject.name
version = "v${modVersion}-${minecraftVersion}-Common"
group = modMavenGroup

dependencies {
    // Minecraft
    minecraft "com.mojang:minecraft:${minecraftVersion}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${minecraftVersion}:${parchmentMappingsVersion}@zip")
    }

    // Puzzles Lib
    modApi "fuzs.puzzleslib:puzzleslib-common:${puzzlesVersion}"
}

loom {
//    accessWidenerPath = file("src/main/resources/${modId}.accesswidener")

    mixin {
        // not sure if this is necessary for common...
        defaultRefmapName = "${modId}.refmap.json"
        // fix for java.lang.NoClassDefFoundError: org/objectweb/asm/tree/MethodNode
        useLegacyMixinAp = false
    }

    // this should hopeful prevent an empty run directory being generated in common during initial project setup
    runs {
        client {
            client()
            setConfigName("Common Client")
            ideConfigGenerated(false)
            runDir("../run")
        }
        server {
            server()
            setConfigName("Common Server")
            ideConfigGenerated(false)
            runDir("../run")
        }
    }
}

processResources {
    // we need fabric.mod.json in common for a transitive access transformer to correctly apply when this is used as an external library
    // just having a dummy fabric.mod.json in common doesn't seem to work as it's occasionally loaded in the fabric project instead of the correct one, causing issues with the mod loading

    duplicatesStrategy DuplicatesStrategy.INCLUDE

    // this will ensure that this task is redone when a value changes
    inputs.property "modId", 					"${modId}"
    inputs.property "modName", 					"${modName}"
    inputs.property "modVersion", 				"${modVersion}"
    inputs.property "modDescription", 			"${modDescription}"
    inputs.property "modGroup", 				project.group
    inputs.property "modPageUrl", 				"${modSourceUrl}"
    inputs.property "modIssueUrl", 				"${modIssueUrl}"
    inputs.property "modAuthor", 				"${modAuthor}"
    inputs.property "minFabricVersion", 		"${minFabricVersion}"
    inputs.property "minFabricApiVersion", 		"${minFabricApiVersion}"
    inputs.property "minecraftVersion", 		"${minecraftVersion}"
    inputs.property "minPuzzlesVersion", 		"${minPuzzlesVersion}"
    inputs.property "packFormat", 				"${packFormat}"
    inputs.property "mainEntryPoint", 			"${project.group}.${rootProject.name}Fabric"
    inputs.property "clientEntryPoint", 		"${project.group}.client.${rootProject.name}FabricClient"
    inputs.property "modFabricEnvironment", 	"${modFabricEnvironment}"

    // replace stuff in fabric.mod.json and pack.mcmeta
    filesMatching ('fabric.mod.json') {
        expand (
                'modId':                	"${modId}",
                'modName':              	"${modName}",
                'modVersion':           	"${modVersion}",
                'modDescription':       	"${modDescription}",
                'modGroup':             	project.group,
                'modPageUrl':           	"${modSourceUrl}",
                'modIssueUrl':          	"${modIssueUrl}",
                'modAuthor':            	"${modAuthor}",
                'minFabricVersion':     	"${minFabricVersion}",
                'minFabricApiVersion':  	"${minFabricApiVersion}",
                'minecraftVersion':  	    "${minecraftVersion}",
                "minPuzzlesVersion":    	"${minPuzzlesVersion}",
                "mainEntryPoint": 			"${project.group}.${rootProject.name}Fabric",
                "clientEntryPoint": 		"${project.group}.client.${rootProject.name}FabricClient",
                "modFabricEnvironment":		"${modFabricEnvironment}"
        )
    }

    filesMatching ('pack.mcmeta') {
        expand (
                'modDescription':       "${modDescription}",
                "packFormat":           "${packFormat}"
        )
    }
}

publishing {
    publications {
        mavenJava (MavenPublication) {
            artifactId = "${modId}-common"
            version = modVersion
            from components.java
            pom {
                name = "${modName} [Common]"
                description = "${modDescription}"
                url = "${modSourceUrl}"
                scm {
                    url = "${modSourceUrl}"
                    connection = "${modSourceUrl}".replace("https", "scm:git:git").concat(".git")
                    developerConnection = "${modSourceUrl}".replace("https://github.com/", "scm:git:git@github.com:").concat(".git")
                }
                issueManagement {
                    system = 'github'
                    url = "${modIssueUrl}"
                }
                licenses {
                    license {
                        name = 'MPL-2'
                        url = 'https://www.mozilla.org/en-US/MPL/2.0/'
                    }
                }
                developers {
                    developer {
                        id = "${modAuthor}".toLowerCase()
                        name = "${modAuthor}"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = 'FuzsModResources'
            url "file://" + project.hasProperty('modResources') ? "${project.findProperty('modResources')}/maven" : System.getenv('local_maven')
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
